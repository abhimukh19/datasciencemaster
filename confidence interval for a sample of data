{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "eab77d03-9715-4b1d-a254-d533e6f7f30d",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The 95% confidence interval the mean lies between((48.614070708874365, 51.385929291125635)) \n"
     ]
    }
   ],
   "source": [
    "#Q1. Calculate the 95% confidence interval for a sample of data with a mean of 50 and a standard deviation of 5 using Python. Interpret the results.\n",
    "\n",
    "from statistics import stdev\n",
    "from scipy import stats\n",
    "size=50 #assumed\n",
    "mean=50 \n",
    "std=5\n",
    "z_value=1.96 #confidence interval being 95%\n",
    "\n",
    "CI_Upper= mean+z_value*(std/(size)**0.5)\n",
    "CI_Lower= mean-z_value*(std/(size)**0.5)\n",
    "\n",
    "print(f\"The 95% confidence interval the mean lies between({CI_Lower,CI_Upper}) \")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "41f9f2f2-6d5e-4e81-8d2b-9b88f6931d5f",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Since the value of 0.9829686751880324 is greater than 0.05 hence we have to accept the null hypothesis\n"
     ]
    }
   ],
   "source": [
    "#Q2. Conduct a chi-square goodness of fit test to determine if the distribution of colors of M&Ms in a bag\n",
    "#matches the expected distribution of 20% blue, 20% orange, 20% green, 10% yellow, 10% red, and 20%\n",
    "#brown. Use Python to perform the test with a significance level of 0.05.\n",
    "\n",
    "#Ho: The observed distribution fits the expected distribution for the colors of M&Ms\n",
    "\n",
    "from scipy.stats import chisquare\n",
    "\n",
    "Total_M_M= 100 #assumed total\n",
    "Expected_Dist=[20,20,20,10,10,20]\n",
    "Obs_List = [18, 22, 19, 11 ,9 ,21]\n",
    "\n",
    "stat_val,p_val=chisquare(Obs_List,Expected_Dist)\n",
    "\n",
    "if(p_val>0.05):\n",
    "    print(f\"Since the value of {p_val} is greater than 0.05 hence we have to accept the null hypothesis\")\n",
    "else:\n",
    "    print(f\" Since the value of {p_val} is less than 0.05 hence we have to reject the null hypothesis\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "89614a3a-1f5b-4c56-99b6-a59c51d14270",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Since the value of 0.05411376622282158 is greater than 0.05 hence we have to accept the null hypothesis\n"
     ]
    }
   ],
   "source": [
    "#Q3. Use Python to calculate the chi-square statistic and p-value for a contingency table with the following data:\n",
    "\n",
    "import scipy\n",
    "from scipy import stats\n",
    "chi_data=[[20,10,15],[15,25,20]]\n",
    "expect_list=[]\n",
    "#scipy.stats.contingency.chi2_contingency function\n",
    "#This function takes as input a 2D array of observed frequencies\n",
    "#returns a tuple containing the chi-square statistic, the p-value, the degrees of freedom and the expected frequencies\n",
    "chi,p_value,df, expect_list= scipy.stats.contingency.chi2_contingency(chi_data)\n",
    "\n",
    "#assuming confidence interval os 95% or level of significance of 0.05\n",
    "          \n",
    "if(p_value>0.05):\n",
    "    print(f\"Since the value of {p_value} is greater than 0.05 hence we have to accept the null hypothesis\")\n",
    "else:\n",
    "    print(f\" Since the value of {p_value} is less than 0.05 hence we have to reject the null hypothesis\")      \n",
    "          \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "daf06fe3-89ff-42e2-a9c9-170228f5c27d",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The population which smokes is ((9.151638887130707, 14.848361112869291)) %\n"
     ]
    }
   ],
   "source": [
    "#Q4. A study of the prevalence of smoking in a population of 500 individuals found that 60 individuals\n",
    "#smoked. Use Python to calculate the 95% confidence interval for the true proportion of individuals in the\n",
    "#population who smoke.\n",
    "\n",
    "import scipy.stats as st\n",
    "\n",
    "n=500 #sample size\n",
    "x=60 #portion of smokers\n",
    "\n",
    "p=x/n #proporition calculation\n",
    "\n",
    "std= (p*(1-p)/n)**0.5\n",
    "cf=0.95\n",
    "lower, upper = st.norm.interval(cf, loc=p, scale=std)\n",
    "print(f\"The population which smokes is ({lower*100, upper*100}) %\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "865e404c-29ac-4afe-87be-1ff1f88a48ce",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The 90% confidence interval the mean lies between((73.026, 76.974)) \n"
     ]
    }
   ],
   "source": [
    "#Q5. Calculate the 90% confidence interval for a sample of data with a mean of 75 and a standard deviation\n",
    "#of 12 using Python. Interpret the results.\n",
    "\n",
    "size=100\n",
    "mean=75\n",
    "std=12\n",
    "\n",
    "z=1.645 #standard value for 90% confidence\n",
    "\n",
    "CI_Upper= mean+z*(std/(size)**0.5)\n",
    "CI_Lower= mean-z*(std/(size)**0.5)\n",
    "\n",
    "print(f\"The 90% confidence interval the mean lies between({CI_Lower,CI_Upper}) \")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "55af4583-4cb2-4151-b003-bcddca361422",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "#Q6. Use Python to plot the chi-square distribution with 10 degrees of freedom. Label the axes and shade the\n",
    "#area corresponding to a chi-square statistic of 15.\n",
    "\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "from scipy.stats import chi2\n",
    "\n",
    "x = np.arange(0, 25, 0.01) #creating the x-axis\n",
    "plt.plot(x, chi2.pdf(x, df=10), label='density function') #plot chi-square distribution\n",
    "plt.fill_between(x[x>=15], chi2.pdf(x[x>=15], df=10), color='green', alpha=0.5) #shade the area under the curve for x >= 15\n",
    "\n",
    "#label axes and title\n",
    "plt.xlabel('x axis')\n",
    "plt.ylabel('y axis')\n",
    "plt.title('Chi-square distribution')\n",
    "\n",
    "#show legend and plot\n",
    "plt.legend()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "7509f9cc-42a1-4589-b20d-a8ccb8b3ac85",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The 99% confidence interval population which prefers coke is ((47.93051576779699, 56.06948423220302)) %\n"
     ]
    }
   ],
   "source": [
    "#Q7. A random sample of 1000 people was asked if they preferred Coke or Pepsi. Of the sample, 520\n",
    "#preferred Coke. Calculate a 99% confidence interval for the true proportion of people in the population who\n",
    "#prefer Coke.\n",
    "\n",
    "import scipy.stats as st\n",
    "\n",
    "n=1000 #sample size\n",
    "x=520 #portion of coke drinkers\n",
    "\n",
    "p=x/n #proporition calculation\n",
    "\n",
    "std= (p*(1-p)/n)**0.5\n",
    "cf=0.99\n",
    "lower, upper = st.norm.interval(cf, loc=p, scale=std)\n",
    "print(f\"The 99% confidence interval population which prefers coke is ({lower*100, upper*100}) %\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "ab83b5db-312c-4db9-90ca-7020c2ae7d8b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Since the value of 0.31731050786291115 is greater than 0.05 hence we have to accept the null hypothesis\n"
     ]
    }
   ],
   "source": [
    "#Q8. A researcher hypothesizes that a coin is biased towards tails. They flip the coin 100 times and observe\n",
    "#45 tails. Conduct a chi-square goodness of fit test to determine if the observed frequencies match the\n",
    "#expected frequencies of a fair coin. Use a significance level of 0.05.\n",
    "\n",
    "#HO: The coin is fair and follows a binomial distribution with p = 0.5 for tails.\n",
    "#H1: The coin is not fair and does not  follow a binomial distribution with p = 0.5 for tails.\n",
    "\n",
    "import scipy.stats as st\n",
    "from scipy.stats import chisquare\n",
    "fairoutcome=[50,50]\n",
    "unfairoutcome=[45,55]\n",
    "stat_val,p_val=chisquare(unfairoutcome,fairoutcome)\n",
    "\n",
    "if(p_val>0.05):\n",
    "    print(f\"Since the value of {p_val} is greater than 0.05 hence we have to accept the null hypothesis\")\n",
    "else:\n",
    "    print(f\" Since the value of {p_val} is less than 0.05 hence we have to reject the null hypothesis\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "28a62741-541f-4046-af63-40d40f6cc1f1",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The expected outcome is [[ 45.  45.]\n",
      " [155. 155.]]\n",
      " Since the value of 0.0005158863863703744 is less than 0.05 hence we have to reject the null hypothesis and state that Smoking is related to cancer \n"
     ]
    }
   ],
   "source": [
    "#Q9. A study was conducted to determine if there is an association between smoking status (smoker or\n",
    "#non-smoker) and lung cancer diagnosis (yes or no). The results are shown in the contingency table below.\n",
    "#Conduct a chi-square test for independence to determine if there is a significant association between\n",
    "#smoking status and lung cancer diagnosis.\n",
    "\n",
    "#HO: Smoking is not related to cancer\n",
    "#H1: Smoking is related to cancer \n",
    "\n",
    "import scipy\n",
    "from scipy import stats\n",
    "rowtotal1=200\n",
    "rowtotal2=200\n",
    "coltotal1=90\n",
    "coltotal2=310\n",
    "totalsize=400\n",
    "expected_list=[]\n",
    "observed_list=[[60,30],[140,170]]\n",
    "#chi_data=[observed_list,expect_list]              \n",
    "#scipy.stats.contingency.chi2_contingency function\n",
    "#This function takes as input a 2D array of observed frequencies\n",
    "#returns a tuple containing the chi-square statistic, the p-value, the degrees of freedom and the expected frequencies\n",
    "chi,p_value,df, expected_list= scipy.stats.contingency.chi2_contingency(chi_data)\n",
    "\n",
    "print(f\"The expected outcome is {expected_list}\")\n",
    "           \n",
    "#assuming confidence interval os 95% or level of significance of 0.05\n",
    "\n",
    "if(p_value>0.05):\n",
    "    print(f\"Since the value of {p_value} is greater than 0.05 hence we have to accept the null hypothesis and state that Smoking is NOT related to cancer \")\n",
    "else:\n",
    "    print(f\" Since the value of {p_value} is less than 0.05 hence we have to reject the null hypothesis and state that Smoking is related to cancer \")      \n",
    "          \n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "d3ddba54-6412-44db-9462-90f826c37096",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The expected outcome is [[212.5 212.5]\n",
      " [162.5 162.5]\n",
      " [125.  125. ]]\n",
      " Since the value of 0.0012348168997745918 is less than 0.05 hence we have to reject the null hypothesis and  there is an association between chocolate preference and country\n"
     ]
    }
   ],
   "source": [
    "#Q10. A study was conducted to determine if the proportion of people who prefer milk chocolate, dark\n",
    "#chocolate, or white chocolate is different in the U.S. versus the U.K. A random sample of 500 people from\n",
    "#the U.S. and a random sample of 500 people from the U.K. were surveyed. The results are shown in the\n",
    "#contingency table below. Conduct a chi-square test for independence to determine if there is a significant\n",
    "#association between chocolate preference and country of origin.\n",
    "\n",
    "#H0: There is no association between chocolate preference and the country\n",
    "#Ha: There is an association between chocolate preference and the country\n",
    "\n",
    "import scipy\n",
    "from scipy import stats\n",
    "Obeserved_list1=[[200,225],[150,175],[150,100]]\n",
    "expected_list1=[]\n",
    "\n",
    "chi,p_value,df, expected_list1= scipy.stats.contingency.chi2_contingency(Obeserved_list1)\n",
    "\n",
    "print(f\"The expected outcome is {expected_list1}\")\n",
    "           \n",
    "#assuming confidence interval os 99% or level of significance of 0.01\n",
    "\n",
    "if(p_value>0.01):\n",
    "    print(f\"Since the value of {p_value} is greater than 0.05 hence we have to accept the null hypothesis and there is no association between chocolate preference and country \")\n",
    "else:\n",
    "    print(f\" Since the value of {p_value} is less than 0.05 hence we have to reject the null hypothesis and  there is an association between chocolate preference and country\")      \n",
    "          \n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "faecfb94-bfa6-4cbb-9593-b0409933606a",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The T Statistic value is 1.0954451150103321\n",
      "The T Critical value is 1.6991270265334972\n",
      "We accept null hypothesis and conclude the population mean is equal to 70\n"
     ]
    }
   ],
   "source": [
    "#Q11. A random sample of 30 people was selected from a population with an unknown mean and standard\n",
    "#deviation. The sample mean was found to be 72 and the sample standard deviation was found to be 10.\n",
    "#Conduct a hypothesis test to determine if the population mean is significantly different from 70. Use a\n",
    "#significance level of 0.05\n",
    "\n",
    "#HO: The population mean is equal to 70\n",
    "#H1: The population mean is not equal to 70\n",
    "\n",
    "\n",
    "from statistics import stdev\n",
    "from scipy import stats\n",
    "samplesize=30\n",
    "samplemean=72 # Mean in sample\n",
    "samplestd=10 #sample std deviation\n",
    "popmean=70\n",
    "\n",
    "\n",
    "alpha = 0.1 # significance level\n",
    "df = samplesize - 1 # degrees of freedom\n",
    "t_statistic= (samplemean-popmean)/(samplestd/((samplesize)**0.5))\n",
    "t_critical = (stats.t.ppf(1 - (alpha/2), df)) # calculating t value\n",
    "print(f\"The T Statistic value is {t_statistic}\")\n",
    "print(f\"The T Critical value is {t_critical}\")\n",
    "\n",
    "\n",
    "if(t_statistic>t_critical):\n",
    "    print(\"We reject null hypothesis and conclude the population mean is not equal to 70\")\n",
    "else:\n",
    "    print(\"We accept null hypothesis and conclude the population mean is equal to 70\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "309d2935-9eaf-48e9-8581-d6cebc750b17",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
